# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2020 by Fraunhofer IEE and University of Kassel
# This file is distributed under the same license as the pandapower package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pandapower 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-09 17:13+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/control/control_loop.rst:3
msgid "The Control loop"
msgstr ""

#: ../../source/control/control_loop.rst:5
msgid ""
"Elements of a network which contain a control loop can be modelled as so "
"called Controller. They implement a controlling mechanism as well as a "
"convergence check and are being registered at the used network "
"``net.controller``. When a simulation is being invoked through "
"``runpp(net, run_control=True)``, the ``run_control()`` method "
"iteratively calls the controlling-method ``control_step()`` on each "
"initialized controller until all of them are converged. The possibility "
"to operate different controllers in a specific sequence is given by the "
"variables ``net.controller.order`` and ``net.controller.level``, which we"
" will go into later. This ``control_step()`` can be calculated for a "
"single point in time as well as a simulation of discrete consecutive "
"points in time using the **timeseries** module method "
"``run_timeseries()``. The following picture describes the dependence of "
"both methods."
msgstr ""

#: ../../source/control/control_loop.rst:15
msgid ":ref:`time series module  <timeseriesmodule>`"
msgstr ""

#: ../../source/control/control_loop.rst:18
msgid "Basic control loop"
msgstr ""

#: ../../source/control/control_loop.rst:26
msgid "Cascade control"
msgstr ""

#: ../../source/control/control_loop.rst:27
msgid ""
"Each Controller has the variables **order** and **level** with the "
"default value **0**. Both variables enable the possibility to operate "
"different controllers in a specific sequence. This operation is called a "
"*cascade control*. Following flow chart explains the general usage."
msgstr ""

#: ../../source/control/control_loop.rst:35
msgid "Controller"
msgstr ""

#: ../../source/control/control_loop.rst:35
msgid "Order"
msgstr ""

#: ../../source/control/control_loop.rst:35
msgid "Level"
msgstr ""

#: ../../source/control/control_loop.rst:37
msgid "Controller A"
msgstr ""

#: ../../source/control/control_loop.rst:37
msgid "1"
msgstr ""

#: ../../source/control/control_loop.rst:37
msgid "1,2"
msgstr ""

#: ../../source/control/control_loop.rst:39
msgid "Controller B"
msgstr ""

#: ../../source/control/control_loop.rst:39
msgid "2"
msgstr ""

